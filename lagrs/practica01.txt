***************************************
* 1.3.- Uso de un Editor sin Gráficos *
***************************************

	1) Me he decantado por la utilización de 'vim' puesto que mcedit
	y nano ya los he utilizado mucho. En cuanto a Joe, por lo que
	vimos en clase,
  	he podido apreciar que comparte notables similitudes con vim pero
	prefiero
  	aprender los comandos de vim ya que éste es el editor por línea de
	comandos más utilizado.

	2)
  	Búsqueda de palabras[2020.10.7]: Al situarte sobre una palabra
	y pulsar asterisco, el cursor va saltando a la siguiente
	aparición de esa misma palabra en el fichero. Muy útil
	para búsquedas.

*****************************
*1.4.-Gestión de Contraseñas*
*****************************
	1) Guardo las contraseñas con GPG:
		Con el comando 'gpg --full-gen-key' genero la cave.
		Se me pregunta por mi nombre completo, email y tiempo
		hasta que expire. Posteriormente, introduzco la contraseña dos veces.
		Con el comando 'gpg --list-secret-keys' puedo ver los
		fingerprints de todas mis claves privadas (que se encuentran
		en el anillo de claves privadas).

		Llevo a cabo la misma operación para guardar la segunda
		contraseña.

	2) Guardo las contraseñas con LibreOffice:
		Abro Writer (LibreOffice) y guardo ambas contraseñas.

	3) Guardo las contraseñas con KeepassX:


**********************
*1.5.- Secret Sharing*
**********************

	1) Descomponer una contraseña en 6 trozos de manera que se pueda recomponer
	con 4:
		Comando -> 'ssss-split -t 4 -n 6'
		salida:
			Generating shares using a (4,6) scheme with dynamic security
			level.
			Enter the secret, at most 128 ASCII characters: Using a
			80 bit security level.
			1-d7c94d56079d76bf0d0f
			2-9daf830b21b3a8394171
			3-29bf42ced1fde3df3503
			4-59542ef8298170ff981a
			5-3e4839c6ae7a8ddd81f7
			6-d2375a6d673f3ed314a2

	2) Recomponer la contraseña:
		Comando -> 'ssss-combine -t 4'
		Salida:
			Enter 4 shares separated by newlines:
			Share [1/4]: 1-d7c94d56079d76bf0d0f
			Share [2/4]: 2-9daf830b21b3a8394171
			Share [3/4]: 3-29bf42ced1fde3df3503
			Share [4/4]: 4-59542ef8298170ff981a
			Resulting secret: gpg_lagrs1

***************
*1.6.- Vagrant*
***************

  1) Instalo Vagrant via "sudo apt-get install vagrant".
  2) Creo el directorio "vbox01" y me muevo a él.
  3) Lanzo "vagrant init ubuntu/focal64".
  4) Ejecuto "vagrant up", lo cual me reporta el siguiente fallo:
      'Error while connecting to libvirt: Error making a connection to libvirt
      URI qemu:///system?no_verify=1&keyfile=/home/fernando/.ssh/id_rsa:
      Call to virConnectOpen failed: Failed to connect socket to
      '/var/run/libvirt/libvirt-sock': No such file or directory'.

      con "apt-cache show vagrant" me percato de que la versión que he instalado
      es la 2.0 y veo en internet que ésta es incompatible con Virtual Box 6.1,
      que es el que yo tengo instalado. Por lo tanto, lo desinstalo con
      "sudo apt-get purge --remove vagrant".
  5) Descargo el binario de vagrant desde la página oficial (versión 2.2).
  6) Lo muevo a /usr/bin/
  7) Lanzo "vagrant init ubuntu/focal64" y, posteriormente, "vagrant up
      --provider virtualbox".
      Ahora todo funciona correctamente.
  8) Entro a la máquina por ssh ejecutando el comando "vagrant ssh".
  9) Dentro del directorio vbox01 del host creo un fichero con el comando
      "touch borrame". Posteriormente, en la máquina virtual, si hago un
      "ls /vagrant", veo ese nuevo fichero.

  10) Para apagar la máquina virtual, desde el project directory ejecuto
      "vagrant halt".

*************************
*1.7.- Usuarios y Grupos*
*************************

  1) Entro en la máquina virtual creada con Vagrant moviéndome al directorio
    'vbox01' y ejecutando 'vagrant up'. Con esto, levantamos la VM.
    Posteriormente, ejecuto 'vagrant ssh' para entrar.

  2) Creo el usuario "fernando" con el comando 'adduser fernando'.
  3) ejecuto 'su fernando' e ingreso la contraseña. Ahora, estoy logeado como
    "fernando" en esta shell.
  4) Trato de ejecutar 'sudo su' y el resultado es el siguiente:

    "[sudo] password for fernando:
     fernando is not in the sudoers file.  This incident will be reported."

  5) Cierro sesión como "fernando" haciendo CONTROL+D en la terminal. Ahora
    vuelvo a ser el usuario "vagrant" que sí pertenece a sudoers, por lo tanto,
    ejecuto sudo su (aunque e este caso no es estrictamente necesario).
    Ahora que soy root, ejecuto 'adduser fernando sudo', lo cual añade al
    usuario "fernando" al grupo "sudo". En este momento, hago CONTROL+D y
    después eejcuto 'su fernando' para vovler a logearme en la shell como
    "fernando". Ahora pruebo a hacer 'sudo su' y el resultado es satisfactorio.

*****************************
*1.9.- Instalación de Docker*
*****************************
	1) Desinstalo versiones anteriores de Docker con "sudo apt purge docker-*"
	2) Miro qué versiones de Docker están disponibles en apt con
		"apt-cache show docker.io" y veo que la última versión es:
		"19.03.6-0ubuntu1~18.04.2".

	3) Instalo la última versión disponible en apt: "sudo apt-get install
		docker.io=19.03.6-0ubuntu1~18.04.2".

	4) Ejecuto "echo 'hola, mundo'" dentro de un contenedor Debian con el
		siguiente comando: "docker run debian echo "hola, mundo"". La salida
		es la siguiente:

		'Unable to find image 'debian:latest' locally
		latest: Pulling from library/debian
		e4c3d3e4f7b0: Pull complete
		Digest: sha256:8414aa82208bc4c2761dc149df67e25c6b8a9380e5d8c4e7b5c84ca2d04bb244
		Status: Downloaded newer image for debian:latest
		hola, mundo'

	5) Para probar holamundo en un docker de ubuntu, primero descargo la imagen
		de Ubuntu 20.04 con el comando "docker pull ubuntu:20.04". Para comprobar
		que se ha importado la imagen, ejecuto "docker image ls". La salida es:

		'REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
		ubuntu                20.04               d70eaf7277ea        12 days ago         72.9MB
		debian                latest              1510e8501783        3 weeks ago         114MB'

	6) Ejecuto la prueba: "docker run ubuntu:20.04 echo 'hola, mundo'".

*******************************
*1.10.- Uso Básico de Imágenes*
*******************************

  1) Creo el contenedor interactivo (sin nombre) con el comando
    "docker run -it ubuntu:20.04 bash"

  2) Dentro del contenedor interactivo, ejecuto el comando "top"
    (monitor de procesos), creo un directorio con "touch borrame". Sin embargo,
    no existe el comando "htop" ni ningún editor de shell (nano, vim, vi, less,
    mcedit).

  3) Ejecuto un nuevo contenedor interactivo con el nombre 'fernc01' ejecutando
    el siguiente comando: "docker run -it --naem fernc01 ubuntu:20.04"

  4) En otra terminal, listo los contenedores con el comando
    "docker container ls" y la salida es la siguiente:

    "CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    1494121d089f        ubuntu:20.04        "/bin/bash"         3 minutes ago       Up 3 minutes                            fernc01
    11529dc565ec        ubuntu:20.04        "bash"              6 minutes ago       Up 6 minutes                            vigorous_burnell"


  5) Sé que el sistema de ficheros del contenedor interactivo no es persistente
    porque si creo un fichero, salgo del contenedor y, cuando vuelvo a lanzarlo,
    dicho fichero ya no existe.

************************************************
*1.11.- Creación de una imagen de un contenedor*
************************************************

  1) He creado la cuenta con el nombre de usuario 'fgonzalezr1998'
  2) Creo el directorio 'banner_docker' y escribo el fichero 'entrypoint.sh' al
    que le doy permisos de ejecución.
    Posteriormente, creo y edito el fichero 'Dockerfile'.

  3) Ejecuto: "docker build -t fgonzalezr1998/banner banner_docker".
  4) Lanzo un contenedor docker con la imagen creada con el siguiente comando:
    "docker run -it -h c01 fgonzalezr1998/banner".
